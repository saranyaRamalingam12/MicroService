package com.productandinventory.service.implementation;

import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.productandinventory.dto.InventoryDTO;
import com.productandinventory.dto.ProductDTO;
import com.productandinventory.entity.Inventory;
import com.productandinventory.entity.Product;
import com.productandinventory.repository.InventoryRepo;
import com.productandinventory.repository.ProductRepo;
import com.productandinventory.serviceinterface.InventoryService;
import com.productandinventory.serviceinterface.ProductService;
@Service
public class ProductServiceImpl implements ProductService
{
	@Autowired	ProductRepo productRepository;
	@Autowired	InventoryRepo inventoryRepository;
	@Autowired	Inventory inventory;
	@Autowired	Product product;
	@Autowired	InventoryDTO inventoryDTO;
	@Autowired 	InventoryService  inventoryService;

	@Override
	public void saveProduct(Product product) {
		 productRepository.save(product);
			inventory=product.getInventory();
			inventory.setProduct(product);
			inventoryService.saveInventory(inventory);
	}

	@Override
	public List<Product> getProductList() {
		return productRepository.findAll();
	}

	@Override
	public Optional<Product> getProductById(Long id) {
		return productRepository.findById(id);
	}

	//Include this in PRoduct catalog
	@Override
	public List<Product> searchProduct(String keyword) {
		 return productRepository.searchProduct(keyword);
	}

	@Override
	public void deleteProductById(long id) {
		product=productRepository.findById(id).get();
		inventory=product.getInventory();
		inventory.setProduct(null);
		productRepository.deleteById(id);
		
	}

	@Override
	public ProductDTO mapProductToDTO(ProductDTO productDTO, Product product, ModelMapper modelMapper) {
		try {
			//productDTO=new ProductDTO();
			productDTO.setId(product.getId());
			productDTO.setProductName(product.getProductName());
			productDTO.setProductPrice(product.getProductPrice());
			productDTO.setBlockCount(product.getBlockCount());
			productDTO.setDescription(product.getDescription());
			productDTO.setImage(product.getImage());
			inventoryDTO.setId(product.getInventory().getId());
			inventoryDTO.setName(product.getInventory().getName());
			inventoryDTO.setQuantity(product.getInventory().getQuantity());
			productDTO.setInventoryDTO(inventoryDTO);
		//	productDTO=modelMapper.map(product, ProductDTO.class);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return productDTO;
	}

	@Override
	public Product mapDtoToProduct(ProductDTO productDTO, Product product, ModelMapper modelMapper) {
		inventory=modelMapper.map(productDTO.getInventoryDTO(), Inventory.class);
		product.setId(productDTO.getId());
		product.setProductName(productDTO.getProductName());
		product.setBlockCount(productDTO.getBlockCount());
		product.setDescription(productDTO.getDescription());
		product.setProductPrice(productDTO.getProductPrice());
		product.setImage(productDTO.getImage());
		product.setInventory(inventory);
		//product=modelMapper.map(productDTO, Product.class);
		return product;	
	}

	// call from Cart service
	@Override
	public void blockProduct(int bookedQuantity, Long productId)
	{
		Optional<Product>optProduct=getProductById(productId);
		if(optProduct.isPresent())
		{
			product=optProduct.get();
			int block=product.getBlockCount();
			product.setBlockCount(block+bookedQuantity);
			saveProduct(product);
		}else {
			throw new NullPointerException();
		}
	}

	@Override
	public void productBlockRemoval(int bookedQuantity, Long productId) {
		Optional<Product>optProduct=getProductById(productId);
		if(optProduct.isPresent())
		{
			product=optProduct.get();
			int block=product.getBlockCount();
			product.setBlockCount(block-bookedQuantity);
			saveProduct(product);
			inventory=product.getInventory();
			int quantity=inventory.getQuantity();
			inventory.setQuantity(quantity-bookedQuantity);
			inventoryService.saveInventory(inventory);
		}else {
			throw new NullPointerException();
		}
		
	}

	@Override
	public void productBlockRemovalPaymentFailure(int bookedQuantity, Long productId) {
		Optional<Product>optProduct=getProductById(productId);
		if(optProduct.isPresent())
		{
			product=optProduct.get();
			int block=product.getBlockCount();
			product.setBlockCount(block-bookedQuantity);
			saveProduct(product);
		}
		
	}

}
