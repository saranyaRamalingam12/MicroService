package com.cart.controller;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cart.dto.AddressDTO;
import com.cart.dto.CartDTO;
import com.cart.dto.ProductDTO;
import com.cart.dto.SingleItemDTO;
import com.cart.dto.UserDTO;
import com.cart.entity.Cart;
import com.cart.entity.Item;
import com.cart.serviceinterface.CartService;
import com.cart.serviceinterface.ItemService;

@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/api/order/ItemAndCart")
public class CartController //port 8084
{
	AddressDTO addressDTO;
	@Autowired	UserDTO userDTO;
	@Autowired	Item item;
	@Autowired	Cart cart;
	@Autowired	CartService cartService;
	@Autowired	ItemService itemService;
	@Autowired  	ModelMapper modelMapper; 
	@Autowired	ProductDTO productDTO;
	@Autowired   CartDTO cartDTO;

	@PostMapping("/savingItemToCart")
	public ResponseEntity<CartDTO> savingItemAndCart (@RequestBody SingleItemDTO singleItemDTO)
	{
		System.out.println("^^^^^^^^^^^^^^^^^^66"+singleItemDTO.toString());
		try
		{
			if(singleItemDTO.getUserId()==null)
			{
				throw new NullPointerException();
			}
			if(cartService.getUserFromSingleItem(singleItemDTO)==null) {
				throw new NullPointerException();
			}
			userDTO=cartService.getUserFromSingleItem(singleItemDTO);
			if(userDTO.getCartId()==null)//new User check
			{
				cart=cartService.savingNewUserToCart(singleItemDTO,cart,userDTO);
				cartService.saveCartInUser(cart,userDTO);			    
				System.out.println(cart.toString()+"##############################");
			}
			else
			{
				if(cartService.checkItem(singleItemDTO,userDTO.getCartId())==null)
				{
					System.out.println("%%%%%****8");
					 cart=cartService.findCartById(userDTO.getCartId());
					 System.out.println("%%%%%");
					 cart=cartService.addItemToCart(singleItemDTO,cart);
					 System.out.println("******************");
				}else
				{
					System.out.println("%%%%%****811111111");
					item=itemService.checkItem(singleItemDTO);
					item.setBookedQuantity(singleItemDTO.getBookedQuantity());
					item.setProductTotal(singleItemDTO.getProductTotal());
					itemService.saveItem(item);
					cart=cartService.findCartById(userDTO.getCartId());
					cart.setTotal(cartService.calcTotalAmount(cart));
					cartService.saveCart(cart);
				}
			}
			cartDTO=cartService.mapCartToDTOIR(cart, cartDTO, modelMapper);//taking cart 
			System.out.println("In MapCartOut");
			 return new ResponseEntity<>(cartDTO,HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/getCart/{id}")
	 public ResponseEntity<CartDTO> getCart(@PathVariable("id") Long id)
	 {
		try
		{
			System.out.println("*******134");
			 if(cartService.findCartById(id)==null){
				 throw new NullPointerException();
			 }
			 System.out.println(id.getClass().getName()+"))))))))))))))))))))))))))))");
			 cart=cartService.findCartById(id);
			 System.out.println(cart.toString());
			 cartDTO=cartService.mapCartToDTOIR(cart, cartDTO, modelMapper);
			 return new ResponseEntity<>(cartDTO, HttpStatus.OK);
		}catch (Exception e) 
		{
			e.printStackTrace();
			return new ResponseEntity<>( HttpStatus.BAD_REQUEST);
		}
	 }
	
	
	@DeleteMapping("removeItemFromCart/{itemId}/{cartId}")
	public  ResponseEntity<CartDTO> deleteItem(@PathVariable("itemId") Long itemId,@PathVariable("cartId") Long cartId)
	{
		try {
			if(itemService.findItemById(itemId)==null) {
				throw new NullPointerException();
			}
			item=itemService.findItemById(itemId);
			cart=cartService.findCartById(cartId);
			itemService.removeRefernceOfItemAndAmountReductionInCart(item,cart);
			cart=cartService.deleteItem(item,cart);
			cartDTO=cartService.mapCartToDTOIR(cart, cartDTO, modelMapper);
			return new ResponseEntity<>(cartDTO, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
	}
	
	@GetMapping("/productBlock/{id}")
	public ResponseEntity<HttpStatus> blockProduct(@PathVariable("id") Long id)
	{
		try {
			if(cartService.findCartById(id)==null){
				throw  new NullPointerException();
			}
			cart=cartService.findCartById(id);
			if(cart.getItem()==null) {
				throw new NullPointerException();
			}
			itemService.productBlock(cart);
			return new ResponseEntity<>( HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	

	//call from OrderHistory And Payment
	@GetMapping("/findCartById/{id}")
	public ResponseEntity<CartDTO> findCartById(@PathVariable("id") Long id)
	{
		try {
			cart=cartService.findCartById(id);
			cartDTO=cartService.mapCartToDTOIR(cart, cartDTO, modelMapper);
			return new ResponseEntity<>(cartDTO, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	//call from OrderHistory And Payment
	@GetMapping("/productBlockRemoval/{id}")
	public ResponseEntity<HttpStatus> blockProductRemoval(@PathVariable("id") Long id)
	{
		try {
			if(cartService.findCartById(id)==null){
				throw  new NullPointerException();
			}
			cart=cartService.findCartById(id);
			if(cart.getItem()==null) {
				throw new NullPointerException();
			}
			cartService.blockRemoval(cart.getId());
			return new ResponseEntity<>( HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/removeRefernceOfItem/{id}")
	public ResponseEntity<HttpStatus> removeRefernceOfItem(@PathVariable("id") Long id)
	{
		try {
			cart=cartService.findCartById(id);
			List<Item>itemList=cart.getItem();
			double total= cart.getTotal();
			for(Item item1:itemList) {
				System.out.println(itemList.size()+"***");
				System.out.println(item1.getProductTotal());
			    total=total-item1.getProductTotal();
//			    cart.setTotal(total);
//			    cartService.saveCart(cart);
				//itemService.removeRefernceOfItemAndAmountReductionInCart(item1, cart.getId());
			}
			 cart.setTotal(total);
			  cartService.saveCart(cart);
			if(cart.getTotal()!=0) {
				throw new Exception();
			}
			cart.setItem(null);
			itemService.deleteListOfItems(itemList);
			return new ResponseEntity<>( HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
   }	
	
//	@GetMapping("/getList")
//	public void getProductList()
//	{
//		
//		String URL="http:localhost:8083/api/order/ProductCatalog/getProductList";
//		ResponseEntity<List<ProductDTO>> product =
//				new RestTemplate().exchange("http://localhost:8083/api/order/ProductCatalog/getProductList",HttpMethod.GET, null, new ParameterizedTypeReference<List<ProductDTO>>() { });
//		List<ProductDTO> rates = product.getBody();
//	    for(ProductDTO obj:rates)
//	    {
//	    	System.out.println(obj.getProductName());
//	    }
//		
//		String URL="http://localhost:8083/api/order/ProductCatalog/editProduct/{id}";
//		ProductDTO product=   new RestTemplate().getForObject(URL, ProductDTO.class,2);
//		System.out.println(product.getInventoryDTO().getQuantity());
//	}

	
	

}
