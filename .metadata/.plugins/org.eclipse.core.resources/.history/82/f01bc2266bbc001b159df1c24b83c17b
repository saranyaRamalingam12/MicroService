package com.login.controller;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.UserLoginDTO;
import com.login.dto.UserDTO;
import com.login.entity.AdminLogin;
import com.login.entity.User;
import com.login.serviceinterface.UserService;


@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/api/order/login")
public class LoginServiceController 
{
	private AdminLogin adminLogin;
	@Autowired
	private User user;
	@Autowired
	 private ModelMapper modelMapper;
	@Autowired
	private UserService loginService;
	@Autowired
	private UserDTO userDTO;
	
	@PostMapping("/registerUser")
    public ResponseEntity<UserDTO> registerUser(@RequestBody UserDTO userDto ) 
	{
		try{
			user=loginService.mapUserDtoToUserEntity(user,userDto);
			if(loginService.checkUserNameExists(user) == null)
			{
				loginService.saveUser(user);
				userDTO=loginService.mapUserEntityToUserDTO(user, userDTO);
				return new ResponseEntity<>(userDTO, HttpStatus.OK);
			}
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}catch (Exception e){	
			 e.printStackTrace();
			 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
    }
	
	@PostMapping("/userLogin")
	  public ResponseEntity<UserDTO> userLogin(@RequestBody UserDTO userDto )
	{
		System.out.println("In Userlogin");
		String tempName=userDto.getName();
		String tempPassword=userDto.getPassword();
		try 
		{			
			if(tempName!=null && tempPassword!=null)
			{
				user=loginService.checkUserLogin(tempName, tempPassword);
				if(user!=null) 
				{
					userDTO=loginService.mapUserEntityToUserDTO(user, userDTO);
					return new ResponseEntity<>(userDTO, HttpStatus.OK);
				}
			}
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}catch (Exception e) {
			 e.printStackTrace();
			 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	  }

}
