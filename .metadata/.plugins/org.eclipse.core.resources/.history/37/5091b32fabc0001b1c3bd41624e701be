package com.productandinventory.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.productandinventory.dto.InventoryDTO;
import com.productandinventory.entity.Inventory;
import com.productandinventory.exceptionhandling.InventoryException;
import com.productandinventory.service.InventoryService;



@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/api/order/Inventory")
public class InventoryController 
{
	@Autowired	private InventoryService inventoryService;
	@Autowired	private Inventory inventory; 
	@Autowired    private InventoryDTO inventoryDTO;
	@Autowired    private ModelMapper modelMapper;
	
	@GetMapping("/getInventoryList")
	 public ResponseEntity<List<InventoryDTO>> getInventoryList()
	 {
			List<Inventory>inList=inventoryService.getInventoryList();
			if(inList.isEmpty())
				throw new InventoryException("Inventory List is Empty");
			List<InventoryDTO>dtoList=new ArrayList<>();
			for(Inventory list:inList){
				inventoryDTO=inventoryService.mapInventoryToDTO(inventoryDTO, list, modelMapper);
				dtoList.add(inventoryDTO);
			}		
			return new ResponseEntity<>(dtoList, HttpStatus.OK);
	 }
	
	@PostMapping("/addInventory")
	public ResponseEntity<HttpStatus> addInventory(@RequestBody InventoryDTO inventoryDTO)
	{
			inventory=inventoryService.mapDtoToInventory(inventoryDTO,inventory,modelMapper);
			inventoryService.saveInventory(inventory);		
			return new ResponseEntity<>(HttpStatus.OK);
	}
	
	@GetMapping("/editInventory/{id}")
	public ResponseEntity<InventoryDTO> editInventory(@PathVariable("id") Long id)
	{
		inventory=inventoryService.getInventoryById(id);
		inventoryDTO=inventoryService.mapInventoryToDTO(inventoryDTO,inventory,modelMapper);
		return new ResponseEntity<>(inventoryDTO, HttpStatus.OK);
	}
	
	@GetMapping("/searchInventory/{keyword}")
	public ResponseEntity<List<InventoryDTO>>  searchInventory(@PathVariable String keyword)
	{
		try{
			List<Inventory>inList=inventoryService.searchInventory(keyword);
			List<InventoryDTO>dtoList=new ArrayList<>();
			if(!inList.isEmpty())
			{
				for(Inventory list:inList){
					inventoryDTO=inventoryService.mapInventoryToDTO(inventoryDTO, list, modelMapper);
					if(inventoryDTO.getProductDTO()!=null)
						inventoryDTO.getProductDTO().setInventoryDTO(null);
					dtoList.add(inventoryDTO);
				}		
				return new ResponseEntity<>(dtoList, HttpStatus.OK);
			}
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		 return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	
	@DeleteMapping("/deleteInventory/{id}")
	public ResponseEntity<HttpStatus> deleteInventory(@PathVariable("id") long id) 
	{
		try 
		{
			inventoryService.deleteInventoryById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
