package com.productcatalog.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.productcatalog.dto.ProductDTO;
import com.productcatalog.entity.Product;
import com.productcatalog.exceptionhandling.ProductException;
import com.productcatalog.service.ProductService;

@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/api/order/ProductCatalog")
public class ProductCatalogController //port 8083
{
	@Autowired	private Product product;
	@Autowired	private ProductDTO productDTO;
	@Autowired	private ProductService productService;
	@Autowired	private ModelMapper modelMapper;
	
	@GetMapping("/getProductList")
	 public ResponseEntity<List<ProductDTO>> getProductList()
	 {
			List<Product>productList=productService.getProductList();
			if(productList.isEmpty())
				throw new ProductException("Product List is Empty");
			List<ProductDTO>dtoList=new ArrayList<>();
			for(Product list:productList){
				//productDTO=new ProductDTO();
				productDTO=productService.mapProductToDTO(productDTO, list, modelMapper);
				dtoList.add(productDTO);
			}		
				return new ResponseEntity<>(dtoList, HttpStatus.OK);
	 }
	
	@GetMapping("/editProduct/{id}")
	public ResponseEntity<ProductDTO> editProduct(@PathVariable("id") Long id)
	{
		Optional<Product>value=productService.getProductById(id);
		if(value.isPresent())
		{
			product=value.get();
			productDTO=productService.mapProductToDTO(productDTO,product,modelMapper);
			return new ResponseEntity<>(productDTO, HttpStatus.OK);
		}
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping("/searchProduct/{keyword}")
	public ResponseEntity<List<ProductDTO>>  searchProduct(@PathVariable String keyword)
	{
		try{
			List<Product>inList=productService.searchProduct(keyword);
			List<ProductDTO>dtoList=new ArrayList<>();
			if(!inList.isEmpty())
			{
				for(Product list:inList){
					productDTO=productService.mapProductToDTO(productDTO, list, modelMapper);
					dtoList.add(productDTO);
				}		
				return new ResponseEntity<>(dtoList, HttpStatus.OK);
			}
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		 return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}

}
