package com.orderhistory.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.orderhistory.dto.AddressDTO;
import com.orderhistory.dto.CartDTO;
import com.orderhistory.dto.UserDTO;
import com.orderhistory.dto.UserDetailsDTO;
import com.orderhistory.serviceinteraction.CartService;
import com.orderhistory.serviceinteraction.ItemService;
import com.orderhistory.serviceinteraction.LoginService;
import com.orderhistory.serviceinterface.OrderService;

@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping("/api/order/OrderAndPayment")
public class OrderHistoryController //port 8085
{
	@Autowired CartService cartService;
	@Autowired OrderService orderService;
	@Autowired CartDTO cartDTO;
	@Autowired UserDTO userDTO;
	@Autowired AddressDTO addressDTO;
	@Autowired LoginService loginService;
	@Autowired UserDetailsDTO userDetailsDTO;
	@Autowired ItemService itemService;
	
	
	@GetMapping("/getAddress/{id}")
	public ResponseEntity<UserDetailsDTO> getAddress(@PathVariable("id") Long id)
	{
		try
		{
			if(cartService.findByCartId(id)==null){
				throw  new NullPointerException();
			}else
			{
				cartDTO=cartService.findByCartId(id);
				userDTO=loginService.findUserById(cartDTO.getUserId());
				userDetailsDTO=orderService.mapUserDTOToUserDetailsDTO(userDTO, cartDTO);
				return new  ResponseEntity<>(userDetailsDTO, HttpStatus.OK);
			}
		}catch (Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<>( HttpStatus.OK);
		}
	}
	
	@GetMapping("/paymentSuccess")
	public ResponseEntity<HttpStatus> paymentSuccess(@RequestBody UserDetailsDTO userDetailsDTO)
	{
		//block removal
		System.out.println(userDetailsDTO.toString());
		try {
			if(cartService.findByCartId(userDetailsDTO.getCartDTO().getId())==null){
				throw  new NullPointerException();
			}else{
				cartDTO=cartService.findByCartId(userDetailsDTO.getCartDTO().getId());
				loginService.mapAddressDTOToEntity(userDetailsDTO);
				cartService.productBlockRemoval(userDetailsDTO.getCartDTO().getId());
				itemService.removeRefernceOfItemAndAmountReductionInCart(cartDTO.getId());
			}
			return new ResponseEntity<>( HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>( HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/paymentFailure/{id}")
	public ResponseEntity<HttpStatus> paymentFail(@PathVariable("id") Long id)
	{
		try {
			if(cartService.findByCartId(id)==null){
				throw  new NullPointerException();
			}else{
				cartService.productBlockRemoval(id);
			}
			return new ResponseEntity<>( HttpStatus.OK);
		}catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
